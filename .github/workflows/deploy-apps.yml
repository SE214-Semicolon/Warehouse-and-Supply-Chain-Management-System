name: Deploy Applications

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/deploy-apps.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_backend:
        description: 'Deploy backend'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # Code quality checks first
  code-check:
    uses: ./.github/workflows/code-check.yml

  build-and-test:
    needs: code-check
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check for changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    # Backend tests
    - name: Install backend dependencies
      if: steps.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./backend
      run: npm ci

    - name: Run backend linting
      if: steps.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./backend
      run: npm run lint

    - name: Run backend tests
      if: steps.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./backend
      run: npm run test

    # Frontend tests
    - name: Install frontend dependencies
      if: steps.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      if: steps.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests
      if: steps.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./frontend
      run: npm run test

  build-images:
    needs: [code-check, build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        app: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.app == 'backend' && env.BACKEND_IMAGE_NAME || env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      if: |
        (matrix.app == 'backend' && (needs.build-and-test.outputs.backend-changed == 'true' || github.event_name == 'workflow_dispatch')) ||
        (matrix.app == 'frontend' && (needs.build-and-test.outputs.frontend-changed == 'true' || github.event_name == 'workflow_dispatch'))
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.app }}
        file: ./${{ matrix.app }}/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    if: |
      github.ref == 'refs/heads/develop' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    needs: [code-check, build-and-test, build-images]
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Backend to Azure App Service
      if: |
        needs.build-and-test.outputs.backend-changed == 'true' ||
        github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_backend == 'true'
      uses: azure/webapps-deploy@v2
      with:
        app-name: warehouse-mgmt-staging-backend
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:dev

    - name: Deploy Frontend to Azure App Service
      if: |
        needs.build-and-test.outputs.frontend-changed == 'true' ||
        github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_frontend == 'true'
      uses: azure/webapps-deploy@v2
      with:
        app-name: warehouse-mgmt-staging-frontend
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:dev

    - name: Run Database Migrations
      if: needs.build-and-test.outputs.backend-changed == 'true'
      run: |
        # Run Prisma migrations using Azure CLI
        az webapp config appsettings set \
          --resource-group warehouse-mgmt-staging-rg \
          --name warehouse-mgmt-staging-backend \
          --settings MIGRATE_ON_STARTUP=true

  deploy-production:
    if: |
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [code-check, build-and-test, build-images]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy to staging slot first (Blue-Green deployment)
    - name: Deploy Backend to Staging Slot
      if: |
        needs.build-and-test.outputs.backend-changed == 'true' ||
        github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_backend == 'true'
      uses: azure/webapps-deploy@v2
      with:
        app-name: warehouse-mgmt-production-backend
        slot-name: staging
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

    - name: Deploy Frontend to Staging Slot
      if: |
        needs.build-and-test.outputs.frontend-changed == 'true' ||
        github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_frontend == 'true'
      uses: azure/webapps-deploy@v2
      with:
        app-name: warehouse-mgmt-production-frontend
        slot-name: staging
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

    # Health check on staging slot
    - name: Health Check Staging Slot
      run: |
        echo "Performing health checks on staging slots..."
        
        # Check backend health
        backend_health=$(curl -s -o /dev/null -w "%{http_code}" https://warehouse-mgmt-production-backend-staging.azurewebsites.net/health)
        if [ "$backend_health" != "200" ]; then
          echo "Backend health check failed with status: $backend_health"
          exit 1
        fi
        
        # Check frontend health
        frontend_health=$(curl -s -o /dev/null -w "%{http_code}" https://warehouse-mgmt-production-frontend-staging.azurewebsites.net/health)
        if [ "$frontend_health" != "200" ]; then
          echo "Frontend health check failed with status: $frontend_health"
          exit 1
        fi
        
        echo "All health checks passed!"

    # Swap slots (Blue-Green deployment)
    - name: Swap Backend Deployment Slots
      if: |
        needs.build-and-test.outputs.backend-changed == 'true' ||
        github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_backend == 'true'
      run: |
        az webapp deployment slot swap \
          --resource-group warehouse-mgmt-production-rg \
          --name warehouse-mgmt-production-backend \
          --slot staging \
          --target-slot production

    - name: Swap Frontend Deployment Slots
      if: |
        needs.build-and-test.outputs.frontend-changed == 'true' ||
        github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_frontend == 'true'
      run: |
        az webapp deployment slot swap \
          --resource-group warehouse-mgmt-production-rg \
          --name warehouse-mgmt-production-frontend \
          --slot staging \
          --target-slot production

    # Final health check on production
    - name: Final Health Check
      run: |
        echo "Performing final health checks on production..."
        
        # Check backend health
        backend_health=$(curl -s -o /dev/null -w "%{http_code}" https://warehouse-mgmt-production-backend.azurewebsites.net/health)
        if [ "$backend_health" != "200" ]; then
          echo "Production backend health check failed with status: $backend_health"
          exit 1
        fi
        
        # Check frontend health
        frontend_health=$(curl -s -o /dev/null -w "%{http_code}" https://warehouse-mgmt-production-frontend.azurewebsites.net/health)
        if [ "$frontend_health" != "200" ]; then
          echo "Production frontend health check failed with status: $frontend_health"
          exit 1
        fi
        
        echo "Production deployment successful!"